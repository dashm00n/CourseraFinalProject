
# Import required libraries
import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px

# NOTE: Titel der Plots beschreiben den Inhalt nicht korrekt (einfach so aus der Übung übernommen)

# Read the airline data into pandas dataframe
import os
print(os.getcwd())
spacex_df = pd.read_csv("10_Final_Project\\spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

options_sites=[{'label': 'All Sites', 'value': 'ALL'},
         {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
         {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
         {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
         {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},]
min_value = spacex_df['Payload Mass (kg)'].min()
max_value = spacex_df['Payload Mass (kg)'].max()
marks = dict([(x, str(x)) for x in range(0, 11000, 1000)])

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                html.Br(),
                                
                                dcc.Dropdown(id='site-dropdown',
                                                options=options_sites,
                                                value='ALL',
                                                placeholder="place holder here",
                                                searchable=True
                                                ),  
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                dcc.RangeSlider(id='payload-slider',
                                                min=0, max=10000, step=1000,
                                                marks=marks,
                                                value=[min_value, max_value]),


                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# Function decorator to specify function input and output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    
    if entered_site == 'ALL':
        filtered_df = spacex_df.rename(columns={'class': '# of Launches'})
        fig = px.pie(filtered_df, values='# of Launches', 
        names='Launch Site', 
        title='Total Success Launches by Site')
        return fig
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        filtered_df = filtered_df.groupby('class')['Launch Site'].count()
        filtered_df = pd.DataFrame(filtered_df/filtered_df.sum()).reset_index()
        filtered_df.rename(columns={'Launch Site': 'Rate'}, inplace=True)
        
        fig = px.pie(filtered_df, values='Rate', 
        names='class', 
        title=f'Total Success Launches for Site {entered_site}')
        
        return fig
        # return the outcomes piechart for a selected site


# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
              [Input(component_id='site-dropdown', component_property='value'), 
               Input(component_id="payload-slider", component_property="value")])
def get_scatter_chart(entered_site, payload):
    
    if entered_site == 'ALL':

        filtered_df = spacex_df[spacex_df['Payload Mass (kg)'].between(payload[0], payload[1])]
        fig = px.scatter(filtered_df, x='Payload Mass (kg)', y='class', 
                         color='Booster Version Category',
                         title='Correlation between Payload and Success for all Sites')

        return fig
    
    else:

        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        filtered_df = filtered_df[filtered_df['Payload Mass (kg)'].between(payload[0], payload[1])]
        fig = px.scatter(filtered_df, x='Payload Mass (kg)', y='class', 
                    color='Booster Version Category',
                    title='Correlation between Payload and Success for all Sites')

        return fig
   
# Run the app
if __name__ == '__main__':
    app.run(debug=True)

